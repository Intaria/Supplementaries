plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "supplementaries-common.mixins.json"
        mixinConfig "supplementaries.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}


processResources {
    inputs.property "version", project.version
    inputs.property "required_moonlight_version", rootProject.required_moonlight_version
    //inputs.property "mod_name": project.getArchivesBaseName()

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version,
                "required_moonlight_version": rootProject.required_moonlight_version,
                "mod_name": project.getArchivesBaseName()
    }

    filesMatching('update.json') {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

task updateJson {
    file('update.json').withWriter { w ->
        file('update_template.json').eachLine { line ->
            w << line.replaceAll("version", project.version) + System.getProperty("line.separator")
        }
        w.close()
    }
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }
    }
}


def dev_mods_dir = "mods_forge"

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
    // Built mods
    flatDir {
        dirs dev_mods_dir
    }
    mavenCentral()
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }


    implementation 'org.jetbrains:annotations:22.0.0'

    //modImplementation("net.mehvahdjukaar:moonlight-forge:${rootProject.moonlight_version}")
    modImplementation("curse.maven:selene-499980:4702354")

    modImplementation("curse.maven:farmers-delight-398521:3999157")

    modImplementation("curse.maven:jei-238222:3928388")
    modImplementation("curse.maven:configured-457570:4462837")

    modCompileOnly("curse.maven:cc-tweaked-282001:3904454")
    modImplementation("curse.maven:curios-309927:3924518")
    modImplementation("curse.maven:autoreglib-250363:4100299")
    modImplementation("curse.maven:quark-oddities-301051:3575623")
    modImplementation("curse.maven:quark-243121:4551115")
    modImplementation("curse.maven:vanillatweaks-272637:4438981")

    //modImplementation("vazkii.quark:Quark:3.4-400")

    modImplementation("curse.maven:framedblocks-441647:3881493")
    modCompileOnly("curse.maven:waystones-245755:3835119")
    modImplementation("com.lowdragmc.shimmer:Shimmer-forge:1.19.2-0.1.14")
    //modImplementation("curse.maven:shimmer-627824:4028644")

    modCompileOnly("curse.maven:balm-531761:3881348")
    modCompileOnly("curse.maven:flan-forge-493246:3902633")
   // modImplementation("curse.maven:additional-banners-230137:3901622")
    modImplementation("curse.maven:cave-enhancements-597562:4388535")
    modImplementation("curse.maven:the-bumblezone-forge-362479:4103196")
   // modCompileOnly("curse.maven:bookshelf-228525:3927538")
    modImplementation("curse.maven:decorative-blocks-362528:3941638")
    modImplementation("curse.maven:map-atlases-forge-519759:3949437")
    modImplementation("curse.maven:create-328085:4547147")
    //modCompileOnly("curse.maven:biomes-o-plenty-220318:4128419")
    modImplementation("curse.maven:terrablender-563928:4013816")
    modImplementation("curse.maven:tetra-289712:4414851")
    modImplementation("curse.maven:mutil-351914:3941314")
    modCompileOnly("curse.maven:breezy-690628:4055467")
    modImplementation("curse.maven:geckolib-388172:4064451")
    modImplementation("curse.maven:farmers-respite-551453:4081312")
    //modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")    
    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")
    modImplementation("curse.maven:flywheel-486392:4341471")


    // modImplementation ("curse.maven:texture-dump-319039:3573998")
}
